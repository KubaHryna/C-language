#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <math.h>
struct trojkat
{
    double a,b,c,h;
};
double obwod(struct trojkat t){

return t.a+t.b+t.c;
}
bool sprawdz(struct trojkat t){
if(t.a<t.c & t.b<t.c){
    if((t.a+t.b)>t.c){
        return true;
    }
}else{
if(t.b<t.a & t.c<t.a){
    if((t.b+t.c)>t.a){
        return true;
    }

}else{
if(t.c<t.b & t.a<t.b){
    if((t.a+t.b)>t.c){
        return true;
    }
}
else{
return false;
}
}}}

void przepisz(struct trojkat t1,struct trojkat *t2){
*t2=t1;
}
void wypisz(struct trojkat t){
printf("Pierwszy bok wynosi: %f\t",t.a);
printf("Drugi bok wynosi: %f\t",t.b);
printf("Trzeci bok wynosi: %f\t",t.c);
printf("\n");

}
struct punkt{
double x,y,z;
};
double minimum(struct punkt tab[],int n){
  double pom;
  double min=sqrt(pow(tab[1].x-tab[0].x,2)
                  +pow(tab[1].y-tab[0].y,2)
                  +pow(tab[1].z-tab[0].z,2)
                  );
for(int i=0;i<n-1;i++){
    for(int j=i+1;j<n;j++)
    {
        pom=sqrt(pow(tab[j].x-tab[i].x,2)+pow(tab[j].y-tab[i].y,2)+pow(tab[j].z-tab[i].z,2));
    }
    if(pom<min){
        min=pom;
    }
}

return min;

}

struct zespolone{
double a;
double b;
};
void wysietl_liczbe_zespolona(struct zespolone liczba){
printf("%f + %f i\n",liczba.a,liczba.b);
}
void wczytaj_liczbe_zespolona(struct zespolone liczba){
scanf("%lf",&liczba.a);
scanf("%lf",&liczba.b);

}
double modul_liczby_zespolonej(struct zespolone liczba){
return pow((liczba.a*liczba.a+liczba.b*liczba.b),0.5);

}

struct zespolone dodaj(struct zespolone liczba1,struct zespolone liczba2){
struct zespolone suma;
suma.a=liczba1.a+liczba2.a;
suma.b=liczba1.b+liczba2.b;
return suma;
};
struct zespolone pomnoz(struct zespolone liczba1,struct zespolone liczba2){
struct zespolone pomnozone;
pomnozone.a=liczba1.a*liczba2.a-liczba1.b*liczba2.b;
pomnozone.b=liczba1.a*liczba2.b+liczba1.b*liczba2.a;
return pomnozone;
};
struct zespolone podziel(struct zespolone liczba1,struct zespolone liczba2){
struct zespolone podzielone;
podzielone.a=(liczba1.a*liczba2.a+liczba1.b*liczba2.b)/(pow(liczba2.a,2)+pow(liczba2.b,2));
podzielone.b=(liczba1.b*liczba2.a-liczba1.a*liczba2.b)/(pow(liczba2.a,2)+pow(liczba2.b,2));
return podzielone;
};

union super_int{
int i;
unsigned int u;
};

struct wiele_int{
int i;
unsigned int u;
};

///listy
struct element{
int i;
struct element * next;
};

struct element * dodajnapoczatek(struct element* Lista, int a){
struct element *wsk=malloc(sizeof(struct element));
wsk->i=a;
wsk->next=Lista;
return wsk;
};




int main(){
    struct punkt P;
    P.x=1;
    P.y=3;
    P.z=5;
    struct punkt Q;
    Q.x=4;
    Q.y=2;
    Q.z=9;
    struct punkt R;
    R.x=5;
    R.y=0;
    R.z=0;
    struct punkt tab[3]={P,Q,R};
    printf("%f\n",minimum(tab,3));
struct trojkat t1;
t1.a=3;
t1.b=4;
t1.c=5;
struct trojkat t2;
t2.a=1;
t2.b=1;
t2.c=1;
struct trojkat *wsk2=&t2;
wypisz(t1);
przepisz(t1,wsk2);
wypisz(t2);
printf("Obwod wynosi : %f\n",obwod(t1));
printf("%d\n",sizeof(double));
printf("%d\n",sizeof(struct trojkat));
printf("%d",sprawdz(t1));

struct zespolone X;
X.a=2;
X.b=7;
wysietl_liczbe_zespolona(X);
printf("Modul liczby zespolonej wynosi: %f\n",modul_liczby_zespolonej(X));
struct zespolone Y;
Y.a=4;
Y.b=8;
wysietl_liczbe_zespolona(Y);
struct zespolone Z;
Z=dodaj(X,Y);
wysietl_liczbe_zespolona(Z);
struct zespolone M;
M=pomnoz(X,Y);
wysietl_liczbe_zespolona(M);
struct zespolone PO;
PO=podziel(X,Y);
wysietl_liczbe_zespolona(PO);

struct wiele_int K;
union super_int L;

////struktury
printf("%d\n",sizeof(K));
printf("%p\n",K);
printf("%p\n",K.i);
printf("%p\n",K.u);

////unia
printf("%d\n",sizeof(L));
printf("%p\n",L);
printf("%p\n",L.i);
printf("%p\n",L.u);


///Listy

struct element EL;
dodajnapoczatek(EL, 15);

}
